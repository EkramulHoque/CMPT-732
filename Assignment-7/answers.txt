1. What happened when you inserted another row with the same primary key as an existing row?
Ans:
An upsert operations is executed i.e inserting another record with the same primary key overwrites it.

2. What happened when you query a keyspace with replication factor 1 and one node down?
How did it behave with replication factor 2 and a node down?
Ans: 
The query fails when I query a keyspace with replication factor 1 and one node down. It returned the row when I did it with replication
factor 2.

3. How did the consistency level affect the results with the node up/down?
Ans:
With consistency level all, a write operation must be written to the commit log and memtable on all replica nodes in the cluster for that partition. For read operation it returns the record after all replicas have responded. The read operation will fail if a replica does not respond.

With consistency level one, a write operation must be written to the commit log and memtable of at least one replica node and it returns a response from the closest replica, as determined by the snitch. By default, a read repair runs in the background to make the other replicas consistent.

So it means when we have consistency level ALL, if there is a down node with a replica then we will not be able to read it. With consistency ONE we will be able to read any available replica it should return the query. Same way for writing if we can satisfy write to all replica nodes then consistency one should satisfy or else for a downed node we wont able to write to all replicas. Consistency ONE will throw an error. Same way for consistency level one it will satisfy if it can write to atleast one node.

4. Which of the WHERE id=? values returned successfully with CONSISTENCY ALL when one of the nodes was down? Why do you think some could be returned but not others?
Ans: 
With the above query I got id 1 and 3 returned and id 2 and 4 not returned. The reason 1 and 3 returned all the nodes that have replicas of 1 and 3 were available. However with 2 and 4 replicas of 2 and 4 are stored are in the downed node so it can't satisfy consistency ALL thus returned error.

5. What was the CREATE TABLE statement you used for the nasalogs table? What was the primary key you choose, and why? 
Ans:
I would add an UUID to each of my row and choose UUID and host as my primary key. This allowed me to 
have unique attribute to our data transferred to any host for a number of request in given time and also allowed me to aggregate data by host where host can be first element of our tuple and uuid can be the second.

6. What was the CQL query you used (or tried) to get the total number of bytes? 
Ans:
SELECT SUM(bytes) FROM nasalogs;
